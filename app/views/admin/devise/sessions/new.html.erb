<%= stylesheet_link_tag "login", "data-turbo-track": "reload" %>
<link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>

<nav class="navbar navbar-expand-lg navbar-dark px-3 w-100">
  <a class="navbar-brand d-flex align-items-center" href="#">
    <%= image_tag "eset_logo.png", alt: "EsET Logo", height: "30", class: "me-2" %>
    <span class="text-white">Electronics Engineering Technology Department</span>
  </a>
</nav>

<div class="container d-flex flex-column align-items-center justify-content-center login-container">
  <div class="login-card text-center">
    <%= image_tag "eset_logo.png", alt: "EsET Logo", height: "60", id: "cardLogo", class: "mb-3 logo-pulse" %>

    <h5 class="fw-semibold mb-1">Electronics Engineering Technology Department</h5>
    <p class="text-light mb-4" style="font-size: 13px; opacity: 0.85;">
      RFID-based Classroom Access Monitoring
    </p>

    <%= form_for(resource, as: resource_name, url: session_path(resource_name), html: { id: "loginForm" }) do |f| %>
      <% flash.each do |type, message| %>
        <% if type == 'notice' %>
          <div class="alert alert-success mb-3 auto-dismiss" role="alert" data-auto-dismiss="7000">
            <div class="d-flex align-items-center">
              <i class="bx bx-check-circle me-2" style="font-size: 20px;"></i>
              <span><%= message %></span>
            </div>
          </div>
        <% elsif type == 'alert' %>
          <div class="custom-error-alert mb-3 auto-dismiss" role="alert" data-auto-dismiss="7000">
            <div class="d-flex align-items-center">
              <div class="error-icon-circle me-3">
                <i class="bx bx-error-circle"></i>
              </div>
              <span><%= message %></span>
            </div>
          </div>
        <% end %>
      <% end %>

      <div class="mb-3 text-start">
        <%= f.label :email, class: "form-label" %>
        <%= f.email_field :email, autofocus: true, autocomplete: "email", class: "form-control" %>
      </div>

      <div class="mb-3 text-start">
        <%= f.label :password, class: "form-label" %>
        <div class="password-input-container">
          <%= f.password_field :password, autocomplete: "current-password", class: "form-control", id: "passwordInput" %>
          <span class="password-toggle-icon" id="togglePassword">
            <i class="bx bx-show" id="eyeIcon"></i>
          </span>
        </div>
      </div>

      <% if devise_mapping.rememberable? %>
        <div class="remember-me text-start">
          <%= f.check_box :remember_me, id: "remember-me" %>
          <%= f.label :remember_me, for: "remember-me" %>
        </div>
      <% end %>

      <div class="text-end">
        <%= f.submit "Login", class: "btn-login", id: "loginButton" %>
      </div>

      <div class="forgot-password mt-3">
        <%= link_to "Forgot your password?", new_password_path(resource_name), class: "text-light small fw-light", style: "opacity: 0.85; text-decoration: none;" %>
      </div>
  <% end %>

    <div id="messageContainer" style="display: none;">
      <%= image_tag "eset_logo.png", alt: "EsET Logo", height: "60", id: "loadingLogo", class: "mb-3 logo-pulse", style: "display: none;" %>
      <p>Please wait a second...</p>
    </div>

  </div>
</div>





<%= javascript_include_tag "https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" %>

<script>
    document.addEventListener('turbo:load', () => {
        const loginForm        = document.getElementById('loginForm');
        const loginButton      = document.getElementById('loginButton');
        const emailInput       = document.querySelector('input[type="email"]');
        const passwordInput    = document.querySelector('input[type="password"]');
        const messageContainer = document.getElementById('messageContainer');
        const cardLogo         = document.getElementById('cardLogo');
        const loadingLogo      = document.getElementById('loadingLogo');


        function toggleLoginButton() {
            if (emailInput.value.trim() && passwordInput.value.trim()) {
                loginButton.disabled = false;
                loginButton.classList.remove('processing');
            } else {
                loginButton.disabled = true;
                loginButton.classList.add('processing');
            }
        }

        emailInput.addEventListener('input', toggleLoginButton);
        passwordInput.addEventListener('input', toggleLoginButton);
        toggleLoginButton();

        // Auto-dismiss functionality for flash messages
        const autoDismissAlerts = document.querySelectorAll('.auto-dismiss');
        autoDismissAlerts.forEach(alert => {
            const dismissTime = parseInt(alert.getAttribute('data-auto-dismiss')) || 7000;
            let timeoutId;
            let startTime = Date.now();
            let remainingTime = dismissTime;

            const startDismissTimer = () => {
                timeoutId = setTimeout(() => {
                    // Different animation for floating notifications
                    if (alert.classList.contains('floating-notification')) {
                        alert.classList.add('fade-out');
                        setTimeout(() => {
                            if (alert.parentNode) {
                                alert.parentNode.removeChild(alert);
                            }
                        }, 400);
                    } else {
                        // Original animation for form alerts
                        alert.style.transition = 'all 0.5s ease-out';
                        alert.style.opacity = '0';
                        alert.style.transform = 'translateY(-20px)';
                        setTimeout(() => {
                            if (alert.parentNode) {
                                alert.parentNode.removeChild(alert);
                            }
                        }, 500);
                    }
                }, remainingTime);
            };

            // Start initial timer
            startDismissTimer();

            // Pause timer on hover
            alert.addEventListener('mouseenter', () => {
                clearTimeout(timeoutId);
                remainingTime = Math.max(0, remainingTime - (Date.now() - startTime));
            });

            // Resume timer when mouse leaves
            alert.addEventListener('mouseleave', () => {
                startTime = Date.now();
                startDismissTimer();
            });
        });

        // Password visibility toggle functionality
        const togglePassword = document.getElementById('togglePassword');
        const eyeIcon = document.getElementById('eyeIcon');

        togglePassword.addEventListener('click', function () {
            const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
            passwordInput.setAttribute('type', type);
            
            // Toggle eye icon
            if (type === 'password') {
                eyeIcon.classList.remove('bx-hide');
                eyeIcon.classList.add('bx-show');
            } else {
                eyeIcon.classList.remove('bx-show');
                eyeIcon.classList.add('bx-hide');
            }
        });

        // Remember Me functionality
        const rememberMeCheckbox = document.getElementById('remember-me');
        const rememberMeLabel = document.querySelector('label[for="remember-me"]');
        
        if (rememberMeCheckbox && rememberMeLabel) {
            // Add visual feedback when checkbox state changes
            rememberMeCheckbox.addEventListener('change', function() {
                if (this.checked) {
                    rememberMeLabel.style.color = '#0faa43';
                    rememberMeLabel.style.fontWeight = '500';
                } else {
                    rememberMeLabel.style.color = 'rgba(255, 255, 255, 0.9)';
                    rememberMeLabel.style.fontWeight = '400';
                }
            });
        }

        loginForm.addEventListener('submit', (e) => {
            e.preventDefault();

            loginButton.value = 'Logging inâ€¦';
            loginButton.disabled = true;
            loginButton.classList.add('processing');

            // Get form data including remember_me checkbox
            const formData = new FormData(loginForm);
            
            // Ensure remember_me is included (checkboxes need special handling)
            const rememberMeCheckbox = document.getElementById('remember-me');
            if (rememberMeCheckbox && rememberMeCheckbox.checked) {
                formData.set('user[remember_me]', '1');
            } else {
                formData.set('user[remember_me]', '0');
            }

            fetch(loginForm.action, {
                method: 'POST',
                headers: {
                    'Accept': 'text/html',
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
                },
                body: new URLSearchParams(formData).toString()
            })
              .then(res => res.text())
              .then(html => {
                  const isFailure = html.includes("Invalid") || html.includes("alert-danger");

                  if (isFailure) {
                      loginButton.value = 'Login';
                      loginButton.disabled = false;
                      loginButton.classList.remove('processing');

                      // Create custom error alert instead of toast
                      const existingAlert = loginForm.querySelector('.custom-error-alert');
                      if (existingAlert) {
                          existingAlert.remove();
                      }

                      const errorAlert = document.createElement('div');
                      errorAlert.className = 'custom-error-alert mb-3 auto-dismiss';
                      errorAlert.setAttribute('role', 'alert');
                      errorAlert.setAttribute('data-auto-dismiss', '7000');
                      
                      const tmp = document.createElement('div');
                      tmp.innerHTML = html;
                      const errorMessage = tmp.querySelector('.custom-error-alert')?.textContent?.trim() || 'Login failed.';
                      
                      errorAlert.innerHTML = `
                          <div class="d-flex align-items-center">
                              <div class="error-icon-circle me-3">
                                  <i class="bx bx-error-circle"></i>
                              </div>
                              <span>${errorMessage}</span>
                          </div>
                      `;

                      // Insert after the form opening tag
                      loginForm.insertBefore(errorAlert, loginForm.firstChild);

                      // Apply auto-dismiss functionality to the new alert
                      const dismissTime = 7000;
                      setTimeout(() => {
                          errorAlert.style.transition = 'all 0.5s ease-out';
                          errorAlert.style.opacity = '0';
                          errorAlert.style.transform = 'translateY(-20px)';
                          setTimeout(() => {
                              if (errorAlert.parentNode) {
                                  errorAlert.parentNode.removeChild(errorAlert);
                              }
                          }, 500);
                      }, dismissTime);
                  } else {
                      cardLogo.classList.add('fade-out');
                      loginForm.classList.add('fade-out');

                      setTimeout(() => {
                          cardLogo.style.display  = 'none';
                          loginForm.style.display = 'none';

                          messageContainer.style.display = 'block';
                          loadingLogo.style.display      = 'block';

                          requestAnimationFrame(() => {
                              messageContainer.classList.add('fade-in');
                              loadingLogo.classList.add('fade-in', 'spin-animation');
                          });

                          setTimeout(() => loginForm.submit(), 800);
                      }, 800);
                  }
              })
              .catch(err => {
                  console.error(err);
                  loginButton.value = 'Login';
                  loginButton.disabled = false;
                  loginButton.classList.remove('processing');
                  
                  // Create custom error alert instead of toast
                  const existingAlert = loginForm.querySelector('.custom-error-alert');
                  if (existingAlert) {
                      existingAlert.remove();
                  }

                  const errorAlert = document.createElement('div');
                  errorAlert.className = 'custom-error-alert mb-3 auto-dismiss';
                  errorAlert.setAttribute('role', 'alert');
                  errorAlert.setAttribute('data-auto-dismiss', '7000');
                  
                  errorAlert.innerHTML = `
                      <div class="d-flex align-items-center">
                          <div class="error-icon-circle me-3">
                              <i class="bx bx-error-circle"></i>
                          </div>
                          <span>Something went wrong. Try again.</span>
                      </div>
                  `;

                  // Insert after the form opening tag
                  loginForm.insertBefore(errorAlert, loginForm.firstChild);

                  // Apply auto-dismiss functionality to the new alert
                  const dismissTime = 7000;
                  setTimeout(() => {
                      errorAlert.style.transition = 'all 0.5s ease-out';
                      errorAlert.style.opacity = '0';
                      errorAlert.style.transform = 'translateY(-20px)';
                      setTimeout(() => {
                          if (errorAlert.parentNode) {
                              errorAlert.parentNode.removeChild(errorAlert);
                          }
                      }, 500);
                  }, dismissTime);
              });
        });
    });
</script>
